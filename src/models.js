"use strict";
const mongoose_1 = require('mongoose');
const bcryptjs_1 = require('bcryptjs');
const pepper = 'JixuYF0AUXLggGNqTP1N1DQi2fEQZgcP';
const userSchema = new mongoose_1.Schema({
    userName: { type: String, required: true, unique: true },
    passwordHash: { type: String, required: true },
    areaCode: { type: String, required: true },
    phoneNumber: { type: String, required: true, index: true },
    endpointId: { type: String, required: true },
    sipUri: { type: String, required: true },
    sipPassword: { type: String, required: true },
    greetingUrl: { type: String },
});
userSchema.method('setPassword', function (password) {
    return new Promise((resolve, reject) => {
        bcryptjs_1.hash(password + pepper, 10, (err, hash) => {
            if (err) {
                return reject(err);
            }
            this.passwordHash = hash;
            return resolve(hash);
        });
    });
});
userSchema.method('comparePassword', function (password) {
    return new Promise((resolve, reject) => {
        bcryptjs_1.compare(password + pepper, this.passwordHash, (err, result) => {
            if (err) {
                return reject(err);
            }
            return resolve(result);
        });
    });
});
const activeCallSchema = new mongoose_1.Schema({
    createdAt: { type: Date, index: true, expires: 2 * 3600 },
    callId: { type: String, index: true },
    bridgeId: { type: String, index: true },
    from: String,
    to: String,
    user: { type: mongoose_1.Schema.Types.ObjectId, ref: 'user' }
});
const voiceMailMessageSchema = new mongoose_1.Schema({
    startTime: { type: Date, index: true },
    endTime: Date,
    mediaUrl: String,
    from: String,
    user: { type: mongoose_1.Schema.Types.ObjectId, ref: 'user' }
});
voiceMailMessageSchema.set('toJSON', { transform: (doc, ret, options) => {
        return {
            id: ret._id.toString(),
            from: ret.from,
            startTime: ret.startTime.toISOString(),
            endTime: ret.endTime.toISOString()
        };
    } });
function getModels(mongoose) {
    const defineModel = (name, schema) => {
        return (mongoose).models[name] || mongoose.model(name, schema);
    };
    return {
        user: defineModel('user', userSchema),
        activeCall: defineModel('activeCall', activeCallSchema),
        voiceMailMessage: defineModel('voiceMailMessage', voiceMailMessageSchema)
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getModels;
//# sourceMappingURL=data:application/json;base64,