"use strict";
const Koa = require('koa');
const mongoose_1 = require('mongoose');
const debugFactory = require('debug');
const models_1 = require('./models');
const routes_1 = require('./routes');
const catapult_1 = require('./catapult');
const staticFilesOptions_1 = require('./staticFilesOptions');
const debug = debugFactory('index');
function getDatabaseUrl() {
    const env = process.env;
    if (env.MONGO_PORT_27017_TCP_ADDR && env.MONGO_PORT_27017_TCP_PORT) {
        return `mongodb://${env.MONGO_PORT_27017_TCP_ADDR}:${env.MONGO_PORT_27017_TCP_PORT}/voiceApp`;
    }
    if (env.MONGODB_URI) {
        return env.MONGODB_URI;
    }
    if (env.DATABASE_URL) {
        return env.DATABASE_URL;
    }
    return 'mongodb://localhost/voiceApp';
}
exports.getDatabaseUrl = getDatabaseUrl;
const mongoose = new mongoose_1.Mongoose();
mongoose.Promise = global.Promise;
mongoose.connect(getDatabaseUrl());
exports.models = models_1.default(mongoose);
class Application extends Koa {
    constructor(api) {
        super();
        this.router = routes_1.default(this, exports.models, api);
        this
            .use(require('koa-static')(staticFilesOptions_1.default.root, staticFilesOptions_1.default))
            .use(this.router.allowedMethods())
            .use(this.router.routes());
    }
}
exports.Application = Application;
if (process.env.NODE_ENV !== 'test') {
    const app = new Application(new catapult_1.CatapultApi(process.env.CATAPULT_USER_ID, process.env.CATAPULT_API_TOKEN, process.env.CATAPULT_API_SECRET));
    app.listen(process.env.PORT || 3000, () => debug('Server started'));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBWSxHQUFHLFdBQU0sS0FBSyxDQUFDLENBQUE7QUFHM0IsMkJBQXVCLFVBQVUsQ0FBQyxDQUFBO0FBQ2xDLE1BQVksWUFBWSxXQUFNLE9BQU8sQ0FBQyxDQUFBO0FBQ3RDLHlCQUFpQyxVQUFVLENBQUMsQ0FBQTtBQUM1Qyx5QkFBc0IsVUFBVSxDQUFDLENBQUE7QUFDakMsMkJBQXdDLFlBQVksQ0FBQyxDQUFBO0FBQ3JELHFDQUErQixzQkFBc0IsQ0FBQyxDQUFBO0FBRXRELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVwQztJQUNDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFFeEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLHlCQUF5QixJQUFJLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7UUFDcEUsTUFBTSxDQUFDLGFBQWEsR0FBRyxDQUFDLHlCQUF5QixJQUFJLEdBQUcsQ0FBQyx5QkFBeUIsV0FBVyxDQUFDO0lBQy9GLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztJQUN4QixDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFDekIsQ0FBQztJQUNELE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQztBQUN2QyxDQUFDO0FBZmUsc0JBQWMsaUJBZTdCLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLG1CQUFRLEVBQUUsQ0FBQztBQUMxQixRQUFTLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDekMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBRXRCLGNBQU0sR0FBRyxnQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTFDLDBCQUFpQyxHQUFHO0lBRW5DLFlBQVksR0FBaUI7UUFDNUIsT0FBTyxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBUyxDQUFDLElBQUksRUFBRSxjQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0MsSUFBSTthQUNGLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsNEJBQWtCLENBQUMsSUFBSSxFQUFFLDRCQUFrQixDQUFDLENBQUM7YUFDdkUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBQ0YsQ0FBQztBQVZZLG1CQUFXLGNBVXZCLENBQUE7QUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksc0JBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDNUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsTUFBTSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBLb2EgZnJvbSAna29hJztcbmltcG9ydCAqIGFzIFJvdXRlciBmcm9tICdrb2Etcm91dGVyJztcblxuaW1wb3J0IHtNb25nb29zZX0gZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0ICogYXMgZGVidWdGYWN0b3J5IGZyb20gJ2RlYnVnJztcbmltcG9ydCBnZXRNb2RlbHMsIHtJTW9kZWxzfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgZ2V0Um91dGVyIGZyb20gJy4vcm91dGVzJztcbmltcG9ydCB7SUNhdGFwdWx0QXBpLCBDYXRhcHVsdEFwaX0gZnJvbSAnLi9jYXRhcHVsdCc7XG5pbXBvcnQgc3RhdGljRmlsZXNPcHRpb25zIGZyb20gJy4vc3RhdGljRmlsZXNPcHRpb25zJztcblxuY29uc3QgZGVidWcgPSBkZWJ1Z0ZhY3RvcnkoJ2luZGV4Jyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhYmFzZVVybCgpOiBzdHJpbmcge1xuXHRjb25zdCBlbnYgPSBwcm9jZXNzLmVudjtcblx0Ly8gRG9ja2VyIHN1cHBvcnRcblx0aWYgKGVudi5NT05HT19QT1JUXzI3MDE3X1RDUF9BRERSICYmIGVudi5NT05HT19QT1JUXzI3MDE3X1RDUF9QT1JUKSB7XG5cdFx0cmV0dXJuIGBtb25nb2RiOi8vJHtlbnYuTU9OR09fUE9SVF8yNzAxN19UQ1BfQUREUn06JHtlbnYuTU9OR09fUE9SVF8yNzAxN19UQ1BfUE9SVH0vdm9pY2VBcHBgO1xuXHR9XG5cdC8vIE1vbmdvbGFiIGluc3RhbmNlcyBzdXBwb3J0XG5cdGlmIChlbnYuTU9OR09EQl9VUkkpIHtcblx0XHRyZXR1cm4gZW52Lk1PTkdPREJfVVJJO1xuXHR9XG5cdC8vIHZpYSBEQVRBQkFTRV9VUkxcblx0aWYgKGVudi5EQVRBQkFTRV9VUkwpIHtcblx0XHRyZXR1cm4gZW52LkRBVEFCQVNFX1VSTDtcblx0fVxuXHRyZXR1cm4gJ21vbmdvZGI6Ly9sb2NhbGhvc3Qvdm9pY2VBcHAnO1xufVxuXG5jb25zdCBtb25nb29zZSA9IG5ldyBNb25nb29zZSgpO1xuKDxhbnk+bW9uZ29vc2UpLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbm1vbmdvb3NlLmNvbm5lY3QoZ2V0RGF0YWJhc2VVcmwoKSk7XG5cbmV4cG9ydCBjb25zdCBtb2RlbHMgPSBnZXRNb2RlbHMobW9uZ29vc2UpO1xuXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb24gZXh0ZW5kcyBLb2Ege1xuXHRyb3V0ZXI6IFJvdXRlcjtcblx0Y29uc3RydWN0b3IoYXBpOiBJQ2F0YXB1bHRBcGkpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMucm91dGVyID0gZ2V0Um91dGVyKHRoaXMsIG1vZGVscywgYXBpKTtcblx0XHR0aGlzXG5cdFx0XHQudXNlKHJlcXVpcmUoJ2tvYS1zdGF0aWMnKShzdGF0aWNGaWxlc09wdGlvbnMucm9vdCwgc3RhdGljRmlsZXNPcHRpb25zKSlcblx0XHRcdC51c2UodGhpcy5yb3V0ZXIuYWxsb3dlZE1ldGhvZHMoKSlcblx0XHRcdC51c2UodGhpcy5yb3V0ZXIucm91dGVzKCkpO1xuXHR9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSB7XG5cdGNvbnN0IGFwcCA9IG5ldyBBcHBsaWNhdGlvbihuZXcgQ2F0YXB1bHRBcGkocHJvY2Vzcy5lbnYuQ0FUQVBVTFRfVVNFUl9JRCwgcHJvY2Vzcy5lbnYuQ0FUQVBVTFRfQVBJX1RPS0VOLCBwcm9jZXNzLmVudi5DQVRBUFVMVF9BUElfU0VDUkVUKSk7XG5cdGFwcC5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwLCAoKSA9PiBkZWJ1ZygnU2VydmVyIHN0YXJ0ZWQnKSk7XG59XG5cbiJdfQ==