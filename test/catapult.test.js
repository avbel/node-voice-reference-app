"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const ava_1 = require('ava');
const sinon = require('sinon');
const randomstring = require('randomstring');
const catapult_1 = require('../src/catapult');
const helpers_1 = require('./helpers');
sinon.stub(randomstring, 'generate').returns('random');
ava_1.default(`buildAbsoluteUrl() should build right absolute url`, (t) => __awaiter(this, void 0, void 0, function* () {
    const ctx = helpers_1.createContext();
    t.is(catapult_1.buildAbsoluteUrl(ctx, '/path1'), 'http://localhost/path1');
    t.is(catapult_1.buildAbsoluteUrl(ctx, 'path2'), 'http://localhost/path2');
    ctx.request.req.headers['x-forwarded-proto'] = 'https';
    t.is(catapult_1.buildAbsoluteUrl(ctx, '/path3'), 'https://localhost/path3');
}));
ava_1.default(`CatapultApi#getApplicationId should return existing application id If the app exists`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const applications = [
        { id: 'appId', name: 'NodeJSVoiceReferenceApp on localhost' }
    ];
    const stub1 = sinon.stub(api.catapult.Application, 'list')
        .withArgs({ size: 1000 })
        .returns(Promise.resolve({ applications: applications }));
    t.is(yield api.getApplicationId(helpers_1.createContext()), 'appId');
    t.true(stub1.called);
}));
ava_1.default(`CatapultApi#getApplicationId should return cached application id on second call`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const applications = [
        { id: 'appId', name: 'NodeJSVoiceReferenceApp on localhost' }
    ];
    const stub1 = sinon.stub(api.catapult.Application, 'list')
        .withArgs({ size: 1000 })
        .returns(Promise.resolve({ applications: applications }));
    t.is(yield api.getApplicationId(helpers_1.createContext()), 'appId');
    t.is(yield api.getApplicationId(helpers_1.createContext()), 'appId');
    t.is(stub1.callCount, 1);
}));
ava_1.default(`CatapultApi#getApplicationId should create new app`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub1 = sinon.stub(api.catapult.Application, 'list')
        .withArgs({ size: 1000 })
        .returns(Promise.resolve({ applications: [] }));
    const stub2 = sinon.stub(api.catapult.Application, 'create')
        .withArgs({
        name: 'NodeJSVoiceReferenceApp on localhost',
        autoAnswer: true,
        incomingCallUrl: 'http://localhost/callCallback'
    })
        .returns(Promise.resolve({ id: 'appId' }));
    t.is(yield api.getApplicationId(helpers_1.createContext()), 'appId');
    t.true(stub1.called);
    t.true(stub2.called);
}));
ava_1.default(`CatapultApi#getDomain should return existing domain info if the domain exists`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const domains = [
        { id: 'domainId', name: 'domain', description: `NodeJSVoiceReferenceApp's domain` }
    ];
    const stub1 = sinon.stub(api.catapult.Domain, 'list')
        .withArgs({ size: 100 })
        .returns(Promise.resolve({ domains: domains }));
    t.deepEqual(yield api.getDomain(helpers_1.createContext()), { id: 'domainId', name: 'domain' });
    t.true(stub1.called);
}));
ava_1.default(`CatapultApi#getDomain should return cached domain info on second call`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const domains = [
        { id: 'domainId', name: 'domain', description: `NodeJSVoiceReferenceApp's domain` }
    ];
    const stub1 = sinon.stub(api.catapult.Domain, 'list')
        .withArgs({ size: 100 })
        .returns(Promise.resolve({ domains: domains }));
    t.deepEqual(yield api.getDomain(helpers_1.createContext()), { id: 'domainId', name: 'domain' });
    t.deepEqual(yield api.getDomain(helpers_1.createContext()), { id: 'domainId', name: 'domain' });
    t.is(stub1.callCount, 1);
}));
ava_1.default(`CatapultApi#getDomain should create new domain`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const name = 'randomrandom';
    const stub1 = sinon.stub(api.catapult.Domain, 'list')
        .withArgs({ size: 100 })
        .returns(Promise.resolve({ domains: [] }));
    const stub2 = sinon.stub(api.catapult.Domain, 'create')
        .withArgs({ name: name, description: `NodeJSVoiceReferenceApp's domain` })
        .returns(Promise.resolve({ id: 'domainId', name: name }));
    t.deepEqual(yield api.getDomain(helpers_1.createContext()), { id: 'domainId', name: name });
    t.true(stub1.called);
    t.true(stub2.called);
}));
ava_1.default(`CatapultApi#createPhoneNumber should search and register a phone number`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub1 = sinon.stub(api.catapult.AvailableNumber, 'searchAndOrder')
        .withArgs('local', { areaCode: '910', quantity: 1 })
        .returns(Promise.resolve([{ id: 'id', number: '+1234567890' }]));
    const stub2 = sinon.stub(api.catapult.PhoneNumber, 'update')
        .withArgs('id', { applicationId: 'appId' })
        .returns(Promise.resolve());
    const stub3 = sinon.stub(api, 'getApplicationId')
        .returns(Promise.resolve('appId'));
    t.is(yield api.createPhoneNumber(helpers_1.createContext(), '910'), '+1234567890');
    t.true(stub1.called);
    t.true(stub2.called);
    t.true(stub3.called);
}));
ava_1.default(`CatapultApi#createSIPAccount should create sip account for the app`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub1 = sinon.stub(api.catapult.Endpoint, 'create')
        .withArgs('domainId', {
        applicationId: 'appId',
        domainId: 'domainId',
        name: 'vu-random',
        description: `NodeJSVoiceReferenceApp's SIP Account`,
        credentials: { password: 'random' }
    })
        .returns(Promise.resolve({ id: 'id' }));
    const stub2 = sinon.stub(api, 'getApplicationId')
        .returns(Promise.resolve('appId'));
    const stub3 = sinon.stub(api, 'getDomain')
        .returns(Promise.resolve({ id: 'domainId', name: 'domain' }));
    t.deepEqual(yield api.createSIPAccount(helpers_1.createContext()), {
        endpointId: 'id',
        uri: 'sip:vu-random@domain.bwapp.bwsip.io',
        password: 'random'
    });
    t.true(stub1.called);
    t.true(stub2.called);
    t.true(stub3.called);
}));
ava_1.default(`CatapultApi#createSIPAuthToken should create auth token for SIP account`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub1 = sinon.stub(api, 'getDomain')
        .returns(Promise.resolve({ id: 'domainId', name: 'domain' }));
    const stub2 = sinon.stub(api.catapult.Endpoint, 'createAuthToken')
        .withArgs('domainId', 'endpointId', { expires: 3600 })
        .returns(Promise.resolve({ expires: 3600, token: 'token' }));
    t.deepEqual(yield api.createSIPAuthToken(helpers_1.createContext(), 'endpointId'), { expires: 3600, token: 'token' });
    t.true(stub1.called);
    t.true(stub2.called);
}));
ava_1.default(`CatapultApi#createBridge should create a bridge`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const data = { callIds: ['callId'] };
    const stub = sinon.stub(api.catapult.Bridge, 'create')
        .withArgs(data)
        .returns(Promise.resolve({ id: 'id' }));
    t.is(yield api.createBridge(data), 'id');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#createCall should create a bridge`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const data = { from: 'number1', to: 'number2' };
    const stub = sinon.stub(api.catapult.Call, 'create')
        .withArgs(data)
        .returns(Promise.resolve({ id: 'id' }));
    t.is(yield api.createCall(data), 'id');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#createGather should create a gather for a call`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const data = { maxDigits: 1 };
    const stub = sinon.stub(api.catapult.Call, 'createGather')
        .withArgs('callId', data)
        .returns(Promise.resolve({ id: 'id' }));
    t.is(yield api.createGather('callId', data), 'id');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#updateCall should update call data`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const data = { state: 'completed' };
    const stub = sinon.stub(api.catapult.Call, 'update')
        .withArgs('callId', data)
        .returns(Promise.resolve());
    yield api.updateCall('callId', data);
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#stopPlayAudioToCall should stop audio`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub = sinon.stub(api.catapult.Call, 'playAudioAdvanced')
        .withArgs('callId', { fileUrl: '' })
        .returns(Promise.resolve());
    yield api.stopPlayAudioToCall('callId');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#playAudioToCall should play audio file`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub = sinon.stub(api.catapult.Call, 'playAudioAdvanced')
        .withArgs('callId', { fileUrl: 'url', tag: 'tag', loopEnabled: false })
        .returns(Promise.resolve());
    yield api.playAudioToCall('callId', 'url', false, 'tag');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#speakSentenceToCall should speak a sentence`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub = sinon.stub(api.catapult.Call, 'playAudioAdvanced')
        .withArgs('callId', { sentence: 'Hello', tag: 'tag' })
        .returns(Promise.resolve());
    yield api.speakSentenceToCall('callId', 'Hello', 'tag');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#transferCall should transfer call to another call`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub = sinon.stub(api.catapult.Call, 'transfer')
        .withArgs('callId', { transferTo: '+1234567890', transferCallerId: 'callerId' })
        .returns(Promise.resolve({ id: 'id' }));
    t.is(yield api.transferCall('callId', '+1234567890', 'callerId'), 'id');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#getCall should return a call data`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub = sinon.stub(api.catapult.Call, 'get')
        .withArgs('callId')
        .returns(Promise.resolve({ callId: 'id' }));
    t.deepEqual(yield api.getCall('callId'), { callId: 'id' });
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#getRecording should return a call data`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub = sinon.stub(api.catapult.Recording, 'get')
        .withArgs('recordingId')
        .returns(Promise.resolve({ media: 'url' }));
    t.deepEqual(yield api.getRecording('recordingId'), { media: 'url' });
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#hangup should complete a call`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const stub = sinon.stub(api.catapult.Call, 'update')
        .withArgs('callId', { state: 'completed' })
        .returns(Promise.resolve());
    yield api.hangup('callId');
    t.true(stub.called);
}));
ava_1.default(`CatapultApi#downloadMediaFile should download a media file`, (t) => __awaiter(this, void 0, void 0, function* () {
    const api = createCatapultApi();
    const data = { content: '1234', contentType: 'text/plain' };
    const stub = sinon.stub(api.catapult.Media, 'download')
        .withArgs('name')
        .returns(Promise.resolve(data));
    t.deepEqual(yield api.downloadMediaFile('name'), data);
    t.true(stub.called);
}));
function createCatapultApi() {
    return new catapult_1.CatapultApi('userId', 'apiToken', 'apiSecret');
}
//# sourceMappingURL=data:application/json;base64,